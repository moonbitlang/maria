// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/maria/internal/spawn"

import(
  "moonbitlang/maria/internal/errno"
)

// Values
fn getpid() -> Int

fn getppid() -> Int

fn kill(Int, Int) -> Unit raise @errno.Errno

async fn spawn(StringView, Array[StringView], stdin? : String, stderr? : &Logger, stdout? : &Logger, cwd? : StringView, env? : Map[String, String]) -> Int

// Errors

// Types and methods
type Buffer
fn Buffer::new() -> Self
fn Buffer::to_string(Self) -> String

pub struct Manager {
  mut id : Int
  cwd : String
  process : Map[Pid, Process]
  // private fields
}
fn Manager::get(Self, Pid) -> Process?
fn Manager::list(Self) -> Array[Process]
fn Manager::new(cwd~ : String) -> Self
async fn Manager::spawn(Self, String, Array[String], stderr? : RedirectOutput, stdout? : RedirectOutput, cwd? : String) -> Process
async fn Manager::start(Self) -> Unit
async fn Manager::wait(Self, Pid) -> Int

type Pid
impl Eq for Pid
impl Hash for Pid
impl Show for Pid
impl ToJson for Pid

pub struct Process {
  pid : Pid
  stdout : RedirectOutput
  stderr : RedirectOutput
  // private fields
}
fn Process::status(Self) -> Int?
async fn Process::wait(Self) -> Int

pub(all) enum RedirectOutput {
  Inherit
  Capture(Buffer)
  File(String)
  Sink
}

// Type aliases

// Traits

