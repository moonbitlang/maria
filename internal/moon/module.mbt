///|
pub struct Module {
  path : String
  name : String
  priv source : String?
  priv packages : Map[String, Package]
  priv mut mtime : Int64
  coverage : Coverage
}

///|
impl @json.FromJson for Module with from_json(
  json : Json,
  json_path : @json.JsonPath,
) -> Module raise @json.JsonDecodeError {
  guard json is { "name": name, .. } else {
    raise @json.JsonDecodeError((json_path, "Expected object with 'name'."))
  }
  let name : String = @json.from_json(name, path=json_path.add_key("name"))
  let source : String? = if json is { "source": source, .. } {
    Some(@json.from_json(source, path=json_path.add_key("source")))
  } else {
    None
  }
  Module::{
    path: "",
    name,
    source,
    packages: {},
    mtime: 0,
    coverage: { path: "" },
  }
}

///|
pub async fn Module::load(path : String) -> Module {
  let path = @fs.resolve(path)
  let moon_mod_path = @path.join(path, "moon.mod.json")
  let mod : Module = moon_mod_path
    |> @fs.read_file
    |> @json.parse
    |> @json.from_json
  let mod = { ..mod, path, coverage: { path, } }
  mod.discover()
  mod
}

///|
pub fn Module::name(self : Module) -> String {
  self.name
}

///|
pub fn Module::source(self : Module) -> String {
  match self.source {
    Some(source) => source
    None => self.path
  }
}

///|
async fn Module::discover(self : Module) -> Unit {
  let mod_name = self.name()
  let src = @path.join(self.path, self.source())
  async fn walk_directories(dir : String) -> Unit {
    let moon_pkg_path = @path.join(dir, "moon.pkg.json")
    if !@fs.exists(moon_pkg_path) {
      let entries = @fs.list_directory(dir)
      for entry in entries {
        if entry.kind is Directory {
          walk_directories(entry.path)
        }
      }
      return
    }
    let pkg_name = if dir == src {
      mod_name
    } else {
      let rel = @path.relative(src, dir)
      "\{mod_name}/\{rel}"
    }
    let pkg = Package::new(name=pkg_name, path=dir.to_string())
    self.packages[pkg_name] = pkg
    let entries = @fs.list_directory(dir)
    for entry in entries {
      if entry.kind is Directory {
        walk_directories(entry.path)
      } else if entry.kind is Regular {
        if entry.name.has_suffix(".mbt") || entry.name.has_suffix(".mbt.md") {
          pkg.add_file(entry.path)
        }
      }
    }
  }

  if self.mtime == 0 {
    walk_directories(src)
    self.mtime = @fs.stat(self.path).mtime()
    return
  } else {
    let pkgs = self.packages.values().collect()
    for i in 0..<pkgs.length() {
      let pkg = pkgs[i]
      if @fs.stat(pkg.path).mtime() > pkg.mtime {
        walk_directories(pkg.path)
      }
    }
  }
}

///|
fn Module::packages(self : Module) -> Iter[Package] {
  self.packages.values()
}

///|
pub fn Module::files(self : Module) -> Iter[File] {
  let pkgs = self.packages().collect()
  let mut files = Iter::empty()
  for i in 0..<pkgs.length() {
    let pkg = pkgs[i]
    files = files.concat(pkg.files())
  }
  files
}

///|
pub async fn Module::locate_package(self : Module, file : String) -> Package {
  let dir = @path.dirname(file)
  let src = self.source()
  let pkg_name = match @path.relative(src, dir) {
    "" | "." => self.name()
    rel => "\{self.name()}/\{rel}"
  }
  match self.packages.get(pkg_name) {
    Some(pkg) => pkg
    None => {
      let pkg = Package::new(name=pkg_name, path=dir.to_string())
      self.packages[pkg_name] = pkg
      pkg
    }
  }
}

///|
pub async fn Module::check(
  self : Module,
  patch_file? : StringView,
  target_dir? : StringView,
) -> Unit {
  self.clear_diagnostics()
  let diagnostics = check(patch_file?, target_dir?, cwd=self.path)
  for d in diagnostics {
    let pkg = self.locate_package(d.loc.path)
    pkg.add_diagnostic(d)
  }
}

///|
fn Module::clear_diagnostics(self : Module) -> Unit {
  for _, pkg in self.packages {
    pkg.clear_diagnostics()
  }
}

///|
pub async fn Module::diagnostics(self : Module) -> Iter[Diagnostic] {
  let pkgs = self.packages.values().collect()
  let mut diags = Iter::empty()
  for i in 0..<pkgs.length() {
    let pkg = pkgs[i]
    diags = diags.concat(pkg.diagnostics())
  }
  diags
}

///|
pub fn Module::package_(self : Module, name : String) -> PackageView? {
  match self.packages.get(name) {
    None => None
    Some(_) => Some(PackageView::{ module_: self, name })
  }
}

///|
async fn Module::info(self : Module, package_~ : String) -> Unit {
  info(package_~, cwd=self.path)
}
