// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/maria/moon"

import(
  "moonbitlang/core/json"
)

// Values
async fn new(user? : String, name? : String, StringView, cwd? : StringView) -> Unit

// Errors

// Types and methods
type Artifacts
impl ToJson for Artifacts

type Coverage
async fn Coverage::analyze(Self, package_? : Package) -> String
async fn Coverage::clean(Self, package_? : String) -> String
async fn Coverage::report(Self, package_? : String, output_file? : String, format? : CoverageFormat) -> String

pub(all) enum CoverageFormat {
  Bisect
  Caret
  Coveralls
  Cobertura
  Html
  Summary
}
impl Show for CoverageFormat

pub struct Diagnostic {
  error_code : Int
  level : Level
  loc : Loc
  message : String
}
impl Show for Diagnostic
impl ToJson for Diagnostic
impl @json.FromJson for Diagnostic

type File
fn File::header(Self) -> SegmentView
fn File::lines(Self) -> Array[StringView]
fn File::path(Self) -> String
async fn File::replace_segment(Self, Int, String) -> Unit
fn File::segment(Self, Int) -> SegmentView
fn File::segments(Self) -> ArrayView[SegmentView]
impl Show for File
impl ToJson for File

pub enum Level {
  Error
  Warning
}
impl Show for Level
impl ToJson for Level

pub struct Loc {
  end : Pos
  path : String
  start : Pos
}
impl Show for Loc
impl ToJson for Loc

pub struct Module {
  path : String
  name : String
  coverage : Coverage
  // private fields
}
async fn Module::check(Self, patch_file? : StringView, target_dir? : StringView) -> Unit
async fn Module::check_patch(Self, SegmentView, String) -> Array[Diagnostic]
async fn Module::diagnostics(Self) -> Iter[Diagnostic]
fn Module::files(Self) -> Iter[File]
async fn Module::load(String) -> Self
fn Module::locate_package(Self, String) -> Package raise
fn Module::name(Self) -> String
fn Module::package_(Self, String) -> PackageView?
fn Module::source(Self) -> String
async fn Module::test_(Self, target_dir? : String, package_? : String, file? : String, index? : Int, enable_coverage? : Bool, debug? : Bool, release? : Bool, strip? : Bool, jobs? : Int, update? : Bool, limit? : Int, patch_file? : String) -> Array[TestFailure]
async fn Module::test_build_only(Self, target_dir? : String, package_? : String, file? : String, index? : Int, enable_coverage? : Bool, debug? : Bool, release? : Bool, strip? : Bool, jobs? : Int, update? : Bool, limit? : Int, patch_file? : String) -> Artifacts

type Package
fn Package::add_diagnostic(Self, Diagnostic) -> Unit
async fn Package::check(Self, patch_file? : StringView, target_dir? : StringView, cwd? : StringView) -> Array[Diagnostic]
async fn Package::interface(Self) -> String?
fn Package::name(Self) -> String
fn Package::path(Self) -> String
impl Show for Package
impl ToJson for Package

pub struct PackageView {
  module_ : Module
  name : String
}
async fn PackageView::info(Self) -> Unit
async fn PackageView::interface(Self) -> String
fn PackageView::package_(Self) -> Package
impl ToJson for PackageView

pub struct Pos {
  col : Int
  line : Int
}
impl Show for Pos
impl ToJson for Pos

type SegmentView
fn SegmentView::content(Self) -> String
fn SegmentView::diagnostics(Self) -> Array[Diagnostic]
async fn SegmentView::replace(Self, String) -> Unit
impl ToJson for SegmentView

type TestFailure
impl ToJson for TestFailure

// Type aliases

// Traits

