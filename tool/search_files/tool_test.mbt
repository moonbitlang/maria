///|
test "search_files - regex search in single file" {
  @async.with_event_loop(fn(_) {
    @mock.with_temporary_directory(name="search-files-regex-single-file", fn(
      cwd,
    ) {
      let _ = cwd.add_file(
        "test.txt", "hello world\nthis is a test\nworld of code",
      )
      let args : Json = {
        "path": "test.txt",
        "regex": "world",
        "kind": "regex",
        "context_lines": 1,
      }
      let result = @search_files.search_files.call(args, cwd.path())

      // Should find matches
      let expected_pattern = "Search completed. Found"
      assert_true(result.output.contains(expected_pattern))
      assert_true(result.output.contains("test.txt:1"))
      assert_true(result.output.contains("hello world"))
    })
  })
}

///|
test "search_files - invalid regex pattern" {
  @async.with_event_loop(fn(_) {
    @mock.with_temporary_directory(name="search-files-invalid-regex-pattern", fn(
      cwd,
    ) {
      let _ = cwd.add_file("test.txt", "hello world")
      let args : Json = {
        "path": "test.txt",
        "regex": "[", // Invalid regex
        "kind": "regex",
      }
      let result = @search_files.search_files.call(args, cwd.path())

      // Should return error for invalid regex
      assert_true(result.output.contains("Invalid regex pattern"))
    })
  })
}

///|
test "search_files - file not found" {
  @async.with_event_loop(fn(_) {
    @mock.with_temporary_directory(name="search-files-file-not-found", fn(cwd) {
      let args : Json = {
        "path": "nonexistent.txt",
        "regex": "test",
        "kind": "regex",
      }
      let result = @search_files.search_files.call(args, cwd.path())

      // Should return error for file not found
      assert_true(result.output.contains("Search path not found"))
    })
  })
}

///|
test "search_files - directory search with file pattern" {
  @async.with_event_loop(fn(_) {
    @mock.with_temporary_directory(
      name="search-files-directory-search-with-file-pattern",
      fn(cwd) {
        let _ = cwd.add_file("test.mbt", "fn main() {\n  println(\"hello\")\n}")
        let _ = cwd.add_file("README.md", "# Project\nThis is a test project")
        let _ = cwd.add_file("config.json", "{\n  \"test\": true\n}")
        let args : Json = {
          "path": ".",
          "regex": "test",
          "kind": "regex",
          "file_pattern": "*.mbt",
        }
        let result = @search_files.search_files.call(args, cwd.path())

        // Should find matches only in .mbt files, not .md or .json
        if result.output.contains("No matches found.") {
          // This is acceptable as we created files without "test" in .mbt files
          assert_true(true)
        } else {
          // If matches are found, they should only be from .mbt files
          assert_false(result.output.contains("README.md"))
          assert_false(result.output.contains("config.json"))
        }
      },
    )
  })
}

///|
test "search_files - missing required parameters" {
  @async.with_event_loop(fn(_) {
    @mock.with_temporary_directory(
      name="search-files-missing-required-parameters",
      fn(cwd) {
        let args : Json = {
          "path": "test.txt",
          // Missing "regex" and "kind"
        }
        let result = @search_files.search_files.call(args, cwd.path())

        // Should return error for missing parameters
        assert_true(
          result.output.contains(
            "'path', 'regex' and 'kind' parameters are required",
          ),
        )
      },
    )
  })
}

///|
test "search_files - invalid search kind" {
  @async.with_event_loop(fn(_) {
    @mock.with_temporary_directory(name="search-files-invalid-search-kind", fn(
      cwd,
    ) {
      let _ = cwd.add_file("test.txt", "hello world")
      let args : Json = {
        "path": "test.txt",
        "regex": "world",
        "kind": "invalid_kind",
      }
      let result = @search_files.search_files.call(args, cwd.path())

      // Should return error for invalid search kind
      assert_true(result.output.contains("Invalid search kind"))
    })
  })
}
