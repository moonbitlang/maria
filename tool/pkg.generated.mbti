// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/maria/tool"

// Values
fn[Output] error(String, error? : Error) -> Result[Output]

fn[Output] ok(Output) -> Result[Output]

fn[Output] tool(description~ : String, name~ : String, parameters~ : Json, ToolFn[Output]) -> Tool[Output]

// Errors

// Types and methods
type AgentTool
async fn AgentTool::call(Self, Json) -> Result[(Json, String)] noraise
fn AgentTool::desc(Self) -> ToolDesc

pub enum Result[Output] {
  Ok(Output)
  Error(Error, String)
}
fn[Output] Result::output(Self[Output]) -> Output raise
fn[Output : ToJson] Result::to_json(Self[Output]) -> Json // from trait `ToJson`
fn[Output : Show] Result::to_string(Self[Output]) -> String // from trait `Show`
impl[Output : Show] Show for Result[Output]
impl[Output : ToJson] ToJson for Result[Output]

pub struct Tool[Output] {
  desc : ToolDesc
  // private fields
}
async fn[Output] Tool::call(Self[Output], Json) -> Result[Output] noraise
fn[Output : ToJson + Show] Tool::to_agent_tool(Self[Output]) -> AgentTool

pub struct ToolDesc {
  description : String
  name : String
  parameters : Json
}

pub(all) struct ToolFn[Output](async (Json) -> Result[Output] noraise)
#deprecated
fn[Output] ToolFn::inner(Self[Output]) -> async (Json) -> Result[Output] noraise

// Type aliases

// Traits

