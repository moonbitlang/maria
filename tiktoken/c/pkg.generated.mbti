// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/tiktoken/c"

// Values
fn[T] exit(Int) -> T

fn[T] free(Pointer[T]) -> Unit

fn[T] malloc(UInt64) -> Pointer[T]

fn memcpy(Pointer[Byte], Pointer[Byte], UInt64) -> Unit

let null : Null

fn strlen(Pointer[Byte]) -> UInt64

// Errors

// Types and methods
#external
pub type Null

#external
pub type Pointer[_]
fn[T, U] Pointer::cast(Self[T]) -> Self[U]
fn[T] Pointer::equal(Self[T], Self[T]) -> Bool // from trait `Eq`
fn[T] Pointer::is_null(Self[T]) -> Bool
fn[T : Load] Pointer::load(Self[T], offset? : Int) -> T
fn[T] Pointer::null() -> Self[T]
fn Pointer::op_equal(Self[Unit], Self[Unit]) -> Bool
fn[T : Load] Pointer::op_get(Self[T], Int) -> T
fn[T : Store] Pointer::op_set(Self[T], Int, T) -> Unit
fn[T : Store] Pointer::store(Self[T], offset? : Int, T) -> Unit
impl[T] Eq for Pointer[T]

// Type aliases
pub typealias Pointer as Ptr

// Traits
pub(open) trait Load {
  load(Pointer[Self], Int) -> Self
}
impl Load for Byte
impl Load for Int
impl Load for Int16
impl Load for Int64
impl Load for UInt
impl Load for UInt16
impl Load for UInt64
impl Load for Float
impl Load for Double

trait Store
impl Store for Byte
impl Store for Int
impl Store for Int16
impl Store for Int64
impl Store for UInt
impl Store for UInt16
impl Store for UInt64
impl Store for Float
impl Store for Double

