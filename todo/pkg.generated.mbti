// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/maria/todo"

import(
  "moonbitlang/core/json"
  "moonbitlang/maria/clock"
  "moonbitlang/maria/internal/uuid"
)

// Values
fn list(uuid~ : @uuid.Generator, clock? : &@clock.Clock, cwd~ : StringView) -> List

// Errors

// Types and methods
type Index

pub(all) struct Item {
  content : String
  created_at : String
  id : String
  notes : String?
  priority : Priority
  status : Status
  updated_at : String
}
impl ToJson for Item
impl @json.FromJson for Item

type List
fn List::add_task(Self, String, status? : Status, priority? : Priority, notes? : String?) -> Item
fn List::find(Self, String) -> Index?
fn List::get(Self, Index) -> Item
async fn List::load(Self) -> Unit
fn List::parse(Self, String, priority~ : Priority, notes? : String) -> Unit
async fn List::save(Self) -> Unit
fn List::todos(Self) -> Array[Item]
fn List::update_item(Self, Item, content? : String, notes? : String?, status? : Status, priority? : Priority) -> Item
fn List::update_task(Self, Index, Item) -> Unit

pub(all) enum Priority {
  High
  Medium
  Low
}
fn Priority::icon(Self) -> String
impl ToJson for Priority
impl @json.FromJson for Priority

pub(all) enum Status {
  Pending
  InProgress
  Completed
}
fn Status::icon(Self) -> String
impl ToJson for Status
impl @json.FromJson for Status

// Type aliases

// Traits

