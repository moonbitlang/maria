// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/maria/model"

import(
  "moonbitlang/core/json"
)

// Values

// Errors

// Types and methods
type Loader
fn Loader::get_model(Self, name? : String, api_key? : String, base_url? : String) -> Model?
async fn Loader::load(Self) -> Unit
fn Loader::new(home~ : StringView, cwd~ : StringView) -> Self

pub struct Model {
  name : String
  description : String?
  model_name : String
  model_type : Type
  api_key : String
  base_url : String
  safe_zone_tokens : Int
  supports_anthropic_prompt_caching : Bool
}
fn Model::from_json(Json, @json.JsonPath) -> Self raise @json.JsonDecodeError // from trait `@json.FromJson`
#as_free_fn
fn Model::new(api_key~ : String, base_url~ : String, name~ : String, safe_zone_tokens~ : Int, model_name? : String, model_type? : Type, description? : String, supports_anthropic_prompt_caching? : Bool) -> Self
fn Model::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for Model
impl @json.FromJson for Model

pub(all) enum Provider {
  OpenAI
}

pub(all) enum Type {
  SaaS(Provider)
}
fn Type::from_json(Json, @json.JsonPath) -> Self raise @json.JsonDecodeError // from trait `@json.FromJson`
fn Type::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for Type
impl @json.FromJson for Type

// Type aliases

// Traits

