// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/maria/openai"

import(
  "moonbitlang/core/json"
  "moonbitlang/maria/internal/schema"
  "moonbitlang/maria/model"
)

// Values
fn[T : ToChatCompletionMessageParamContent] assistant_message(content? : T, tool_calls? : Array[ChatCompletionMessageToolCall], name? : String) -> ChatCompletionMessageParam

async fn chat(model~ : @model.Model, ChatCompletionParam) -> ChatCompletion

fn chat_completion(model~ : String, messages~ : Array[ChatCompletionMessageParam], tools? : Array[ChatCompletionToolParam], usage? : CompletionUsageParam, user? : String, max_tokens? : Int, temperature? : Double, response_format? : ResponseFormat) -> ChatCompletionParam

async fn[T : Structural] data(model~ : @model.Model, prompt~ : String) -> T

async fn json(model~ : @model.Model, prompt~ : String) -> Json

fn json_schema(name~ : String, schema~ : Map[String, Json], description? : String, strict? : Bool) -> ResponseFormat

fn[T : ToChatCompletionMessageParamContent] system_message(content~ : T, name? : String) -> ChatCompletionMessageParam

async fn text(model~ : @model.Model, prompt~ : String) -> String

fn text_content_part(String, cache_control? : CacheControl) -> ChatCompletionContentPartParam

fn tool(name~ : String, description~ : String, parameters~ : Map[String, Json], strict? : Bool) -> ChatCompletionToolParam

fn[T : ToChatCompletionMessageParamContent] tool_message(content~ : T, tool_call_id~ : String) -> ChatCompletionMessageParam

fn usage(include_~ : Bool) -> CompletionUsageParam

fn[T : ToChatCompletionMessageParamContent] user_message(content~ : T, name? : String) -> ChatCompletionMessageParam

// Errors

// Types and methods
pub(all) enum CacheControl {
  Ephemeral
}
fn CacheControl::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for CacheControl

pub struct ChatCompletion {
  id : String
  choices : Array[ChatCompletionChoice]
  created : Int
  model : String
  usage : CompletionUsage?
  system_fingerprint : String?
  service_tier : ChatCompletionServiceTier?
}
fn ChatCompletion::from_json(Json, @json.JsonPath) -> Self raise @json.JsonDecodeError // from trait `@json.FromJson`
fn ChatCompletion::output(Self, &Logger) -> Unit // from trait `Show`
fn ChatCompletion::to_string(Self) -> String // from trait `Show`
impl Show for ChatCompletion
impl @json.FromJson for ChatCompletion

pub struct ChatCompletionAssistantMessageParam {
  content : Array[ChatCompletionContentPartParam]
  name : String?
  tool_calls : Array[ChatCompletionMessageToolCall]
  function_call : ChatCompletionMessageFunctionCall?
}

pub struct ChatCompletionChoice {
  finish_reason : ChatCompletionChoiceFinishReason
  index : Int
  message : ChatCompletionMessage
  logprobs : ChatCompletionChoiceLogprobs?
}
fn ChatCompletionChoice::output(Self, &Logger) -> Unit // from trait `Show`
fn ChatCompletionChoice::to_string(Self) -> String // from trait `Show`
impl Show for ChatCompletionChoice

pub enum ChatCompletionChoiceFinishReason {
  Stop
  Length
  ToolCalls
  ContentFilter
  FunctionCall
}
fn ChatCompletionChoiceFinishReason::output(Self, &Logger) -> Unit // from trait `Show`
fn ChatCompletionChoiceFinishReason::to_string(Self) -> String // from trait `Show`
impl Show for ChatCompletionChoiceFinishReason

pub struct ChatCompletionChoiceLogprobs {
  content : Array[ChatCompletionTokenLogprob]?
  refusal : Array[ChatCompletionTokenLogprob]?
}
fn ChatCompletionChoiceLogprobs::output(Self, &Logger) -> Unit // from trait `Show`
fn ChatCompletionChoiceLogprobs::to_string(Self) -> String // from trait `Show`
impl Show for ChatCompletionChoiceLogprobs

pub struct ChatCompletionChunk {
  id : String
  choices : Array[ChatCompletionChunkChoice]
  created : Int
  model : String
  usage : CompletionUsage?
  system_fingerprint : String?
  service_tier : ChatCompletionServiceTier?
}
fn ChatCompletionChunk::from_json(Json, @json.JsonPath) -> Self raise @json.JsonDecodeError // from trait `@json.FromJson`
impl @json.FromJson for ChatCompletionChunk

pub struct ChatCompletionChunkChoice {
  index : Int
  delta : ChatCompletionChunkChoiceDelta
  finish_reason : ChatCompletionChoiceFinishReason?
}

pub struct ChatCompletionChunkChoiceDelta {
  content : String?
  role : ChatCompletionRole?
  tool_calls : Array[ChatCompletionChunkChoiceDeltaToolCall]?
}

pub struct ChatCompletionChunkChoiceDeltaToolCall {
  index : Int
  id : String?
  function : ChatCompletionChunkChoiceDeltaToolCallFunction
}

pub struct ChatCompletionChunkChoiceDeltaToolCallFunction {
  arguments : String?
  name : String?
}

pub enum ChatCompletionContentPartParam {
  Text(ChatCompletionContentPartTextParam)
}
fn ChatCompletionContentPartParam::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for ChatCompletionContentPartParam
impl ToChatCompletionMessageParamContent for ChatCompletionContentPartParam

pub struct ChatCompletionContentPartTextParam {
  text : String
  cache_control : CacheControl?
}

pub struct ChatCompletionMessage {
  content : String?
  refusal : String?
  role : ChatCompletionMessageRole
  tool_calls : Array[ChatCompletionMessageToolCall]
  function_call : ChatCompletionMessageFunctionCall?
}
fn ChatCompletionMessage::from_json(Json, @json.JsonPath) -> Self raise @json.JsonDecodeError // from trait `@json.FromJson`
fn ChatCompletionMessage::output(Self, &Logger) -> Unit // from trait `Show`
fn ChatCompletionMessage::to_json(Self) -> Json // from trait `ToJson`
fn ChatCompletionMessage::to_param(Self) -> ChatCompletionMessageParam
fn ChatCompletionMessage::to_string(Self) -> String // from trait `Show`
impl Show for ChatCompletionMessage
impl ToJson for ChatCompletionMessage
impl @json.FromJson for ChatCompletionMessage

pub struct ChatCompletionMessageFunctionCall {
  arguments : String
  name : String
}
fn ChatCompletionMessageFunctionCall::output(Self, &Logger) -> Unit // from trait `Show`
fn ChatCompletionMessageFunctionCall::to_string(Self) -> String // from trait `Show`
impl Show for ChatCompletionMessageFunctionCall

pub(all) enum ChatCompletionMessageParam {
  System(ChatCompletionSystemMessageParam)
  User(ChatCompletionUserMessageParam)
  Assistant(ChatCompletionAssistantMessageParam)
  Tool(ChatCompletionToolMessageParam)
}
fn ChatCompletionMessageParam::from_json(Json, @json.JsonPath) -> Self raise @json.JsonDecodeError // from trait `@json.FromJson`
fn ChatCompletionMessageParam::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for ChatCompletionMessageParam
impl @json.FromJson for ChatCompletionMessageParam

pub enum ChatCompletionMessageRole {
  Assistant
}
fn ChatCompletionMessageRole::output(Self, &Logger) -> Unit // from trait `Show`
fn ChatCompletionMessageRole::to_json(Self) -> Json // from trait `ToJson`
fn ChatCompletionMessageRole::to_string(Self) -> String // from trait `Show`
impl Show for ChatCompletionMessageRole
impl ToJson for ChatCompletionMessageRole

pub struct ChatCompletionMessageToolCall {
  id : String
  function : Function
}
fn ChatCompletionMessageToolCall::output(Self, &Logger) -> Unit // from trait `Show`
fn ChatCompletionMessageToolCall::to_json(Self) -> Json // from trait `ToJson`
fn ChatCompletionMessageToolCall::to_string(Self) -> String // from trait `Show`
impl Show for ChatCompletionMessageToolCall
impl ToJson for ChatCompletionMessageToolCall

pub struct ChatCompletionParam {
  model : String
  messages : Array[ChatCompletionMessageParam]
  tools : Array[ChatCompletionToolParam]
  usage : CompletionUsageParam?
  user : String?
  max_tokens : Int?
  temperature : Double?
  response_format : ResponseFormat?
}
fn ChatCompletionParam::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for ChatCompletionParam

pub enum ChatCompletionRole {
  Developer
  System
  User
  Assistant
  Tool
}

pub enum ChatCompletionServiceTier {
  Auto
  Default
  Flex
  Scale
  Priority
}
fn ChatCompletionServiceTier::output(Self, &Logger) -> Unit // from trait `Show`
fn ChatCompletionServiceTier::to_string(Self) -> String // from trait `Show`
impl Show for ChatCompletionServiceTier

pub struct ChatCompletionSystemMessageParam {
  content : Array[ChatCompletionContentPartParam]
  name : String?
}

pub struct ChatCompletionTokenLogprob {
  token : String
  logprob : Double
  bytes : Array[Int]?
  top_logprobs : Array[ChatCompletionTopLogprob]
}
fn ChatCompletionTokenLogprob::output(Self, &Logger) -> Unit // from trait `Show`
fn ChatCompletionTokenLogprob::to_string(Self) -> String // from trait `Show`
impl Show for ChatCompletionTokenLogprob

pub struct ChatCompletionToolMessageParam {
  content : Array[ChatCompletionContentPartParam]
  tool_call_id : String
}

pub enum ChatCompletionToolParam {
  Function(FunctionDefinition)
}
fn ChatCompletionToolParam::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for ChatCompletionToolParam

pub struct ChatCompletionTopLogprob {
  token : String
  logprob : Double
  bytes : Array[Int]?
}
fn ChatCompletionTopLogprob::output(Self, &Logger) -> Unit // from trait `Show`
fn ChatCompletionTopLogprob::to_string(Self) -> String // from trait `Show`
impl Show for ChatCompletionTopLogprob

pub struct ChatCompletionUserMessageParam {
  content : Array[ChatCompletionContentPartParam]
  name : String?
}

pub struct CompletionTokensDetails {
  reasoning_tokens : Int?
}
fn CompletionTokensDetails::output(Self, &Logger) -> Unit // from trait `Show`
fn CompletionTokensDetails::to_json(Self) -> Json // from trait `ToJson`
fn CompletionTokensDetails::to_string(Self) -> String // from trait `Show`
impl Show for CompletionTokensDetails
impl ToJson for CompletionTokensDetails

pub struct CompletionUsage {
  completion_tokens : Int
  completion_tokens_details : CompletionTokensDetails?
  cost : Double?
  cost_details : CostDetails?
  prompt_tokens : Int
  prompt_tokens_details : PromptTokensDetails?
  total_tokens : Int
}
fn CompletionUsage::from_json(Json, @json.JsonPath) -> Self raise @json.JsonDecodeError // from trait `@json.FromJson`
fn CompletionUsage::output(Self, &Logger) -> Unit // from trait `Show`
fn CompletionUsage::to_json(Self) -> Json // from trait `ToJson`
fn CompletionUsage::to_string(Self) -> String // from trait `Show`
impl Show for CompletionUsage
impl ToJson for CompletionUsage
impl @json.FromJson for CompletionUsage

pub struct CompletionUsageParam {
  include_ : Bool
}

pub struct CostDetails {
  upstream_inference_cost : Double?
}
fn CostDetails::output(Self, &Logger) -> Unit // from trait `Show`
fn CostDetails::to_json(Self) -> Json // from trait `ToJson`
fn CostDetails::to_string(Self) -> String // from trait `Show`
impl Show for CostDetails
impl ToJson for CostDetails

pub struct Function {
  arguments : String
  name : String
}
fn Function::output(Self, &Logger) -> Unit // from trait `Show`
fn Function::to_string(Self) -> String // from trait `Show`
impl Show for Function

pub struct FunctionDefinition {
  name : String
  description : String
  parameters : Map[String, Json]
  strict : Bool?
}

type JsonSchema

pub struct PromptTokensDetails {
  cached_tokens : Int?
  audio_tokens : Int?
}
fn PromptTokensDetails::output(Self, &Logger) -> Unit // from trait `Show`
fn PromptTokensDetails::to_json(Self) -> Json // from trait `ToJson`
fn PromptTokensDetails::to_string(Self) -> String // from trait `Show`
impl Show for PromptTokensDetails
impl ToJson for PromptTokensDetails

pub(all) enum ResponseFormat {
  Text
  JsonSchema(JsonSchema)
  JsonObject
}
fn ResponseFormat::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for ResponseFormat

// Type aliases

// Traits
pub(open) trait Structural : @json.FromJson {
  name() -> String
  description() -> String
  schema() -> @schema.Schema
}

trait ToChatCompletionMessageParamContent
impl ToChatCompletionMessageParamContent for String
impl[T : ToChatCompletionMessageParamContent] ToChatCompletionMessageParamContent for Array[T]
impl ToChatCompletionMessageParamContent for StringView

