///|
async test "todo_write/create/plain" (t : @test.T) {
  @mock.run(t, taco => {
    let todo_list = @todo.list(
      clock=taco.clock,
      uuid=taco.uuid,
      cwd=taco.cwd.path(),
    )
    let result = @todo_write.new(todo_list).call({
      "action": "create",
      "content": (
        #|Test todo item
        #|Another test item
      ),
      "priority": "high",
    })
    @json.inspect(result, content=[
      "Ok",
      {
        "todos": [
          {
            "content": "Test todo item",
            "created_at": "1970-01-01T00:00:00.003Z",
            "id": "ac8a366d",
            "priority": "High",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.003Z",
          },
          {
            "content": "Another test item",
            "created_at": "1970-01-01T00:00:00.004Z",
            "id": "1ea1417c",
            "priority": "High",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.004Z",
          },
        ],
        "message": "Created 2 new todo items",
        "updated_todos": [
          {
            "content": "Test todo item",
            "created_at": "1970-01-01T00:00:00.003Z",
            "id": "ac8a366d",
            "priority": "High",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.003Z",
          },
          {
            "content": "Another test item",
            "created_at": "1970-01-01T00:00:00.004Z",
            "id": "1ea1417c",
            "priority": "High",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.004Z",
          },
        ],
        "is_new_creation": true,
      },
    ])
    guard result is Ok(output) else {
      fail("Expected Ok result but got: \{result}")
    }
    inspect(
      output,
      content=(
        #|‚úÖ Operation completed: Created 2 new todo items
        #|
        #|üìù Newly created todos:
        #|  üî¥ ‚è≥ [ac8a366d] Test todo item
        #|  üî¥ ‚è≥ [1ea1417c] Another test item
        #|
        #|üìä Current summary: Total 2 items | Pending 2 | In Progress 0 | Completed 0
      ),
    )
  })
}

///|
async test "todo_write/create/<task>" (t : @test.T) {
  @mock.run(t, taco => {
    let todo_list = @todo.list(
      clock=taco.clock,
      uuid=taco.uuid,
      cwd=taco.cwd.path(),
    )
    let result = @todo_write.new(todo_list).call({
      "action": "create",
      "content": (
        #|<task>Examine reference repository structure at .moonagent/repos/ini</task>
        #|<task>Examine current MoonBit project structure</task>
        #|<task>Analyze source files in ini repository</task>
        #|<task>Plan migration strategy preserving original structure</task>
        #|<task>Translate C/C++ files to MoonBit file-by-file</task>
        #|<task>Create appropriate MoonBit module structure</task>
        #|<task>Test migrated functionality</task>
      ),
    })
    @json.inspect(result, content=[
      "Ok",
      {
        "todos": [
          {
            "content": "Examine reference repository structure at .moonagent/repos/ini",
            "created_at": "1970-01-01T00:00:00.003Z",
            "id": "ac8a366d",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.003Z",
          },
          {
            "content": "Examine current MoonBit project structure",
            "created_at": "1970-01-01T00:00:00.004Z",
            "id": "1ea1417c",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.004Z",
          },
          {
            "content": "Analyze source files in ini repository",
            "created_at": "1970-01-01T00:00:00.005Z",
            "id": "f378dd8d",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.005Z",
          },
          {
            "content": "Plan migration strategy preserving original structure",
            "created_at": "1970-01-01T00:00:00.006Z",
            "id": "42858c8d",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.006Z",
          },
          {
            "content": "Translate C/C++ files to MoonBit file-by-file",
            "created_at": "1970-01-01T00:00:00.007Z",
            "id": "1258fdc0",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.007Z",
          },
          {
            "content": "Create appropriate MoonBit module structure",
            "created_at": "1970-01-01T00:00:00.008Z",
            "id": "aaa2f959",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.008Z",
          },
          {
            "content": "Test migrated functionality",
            "created_at": "1970-01-01T00:00:00.009Z",
            "id": "8f0ff2dc",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.009Z",
          },
        ],
        "message": "Created 7 new todo items",
        "updated_todos": [
          {
            "content": "Examine reference repository structure at .moonagent/repos/ini",
            "created_at": "1970-01-01T00:00:00.003Z",
            "id": "ac8a366d",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.003Z",
          },
          {
            "content": "Examine current MoonBit project structure",
            "created_at": "1970-01-01T00:00:00.004Z",
            "id": "1ea1417c",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.004Z",
          },
          {
            "content": "Analyze source files in ini repository",
            "created_at": "1970-01-01T00:00:00.005Z",
            "id": "f378dd8d",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.005Z",
          },
          {
            "content": "Plan migration strategy preserving original structure",
            "created_at": "1970-01-01T00:00:00.006Z",
            "id": "42858c8d",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.006Z",
          },
          {
            "content": "Translate C/C++ files to MoonBit file-by-file",
            "created_at": "1970-01-01T00:00:00.007Z",
            "id": "1258fdc0",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.007Z",
          },
          {
            "content": "Create appropriate MoonBit module structure",
            "created_at": "1970-01-01T00:00:00.008Z",
            "id": "aaa2f959",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.008Z",
          },
          {
            "content": "Test migrated functionality",
            "created_at": "1970-01-01T00:00:00.009Z",
            "id": "8f0ff2dc",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.009Z",
          },
        ],
        "is_new_creation": true,
      },
    ])
    guard result is Ok(output) else {
      fail("Expected Ok result but got: \{result}")
    }
    inspect(
      output,
      content=(
        #|‚úÖ Operation completed: Created 7 new todo items
        #|
        #|üìù Newly created todos:
        #|  üü° ‚è≥ [ac8a366d] Examine reference repository structure at .moonagent/repos/ini
        #|  üü° ‚è≥ [1ea1417c] Examine current MoonBit project structure
        #|  üü° ‚è≥ [f378dd8d] Analyze source files in ini repository
        #|  üü° ‚è≥ [42858c8d] Plan migration strategy preserving original structure
        #|  üü° ‚è≥ [1258fdc0] Translate C/C++ files to MoonBit file-by-file
        #|  üü° ‚è≥ [aaa2f959] Create appropriate MoonBit module structure
        #|  üü° ‚è≥ [8f0ff2dc] Test migrated functionality
        #|
        #|üìä Current summary: Total 7 items | Pending 7 | In Progress 0 | Completed 0
      ),
    )
  })
}

///|
async test "todo_write/update" (t : @test.T) {
  @mock.run(t, taco => {
    let todo_list = @todo.list(
      clock=taco.clock,
      uuid=taco.uuid,
      cwd=taco.cwd.path(),
    )
    let result = @todo_write.new(todo_list).call({
      "action": "create",
      "content": (
        #|First item
        #|Second item
      ),
      "priority": "medium",
    })
    @json.inspect(result, content=[
      "Ok",
      {
        "todos": [
          {
            "content": "First item",
            "created_at": "1970-01-01T00:00:00.003Z",
            "id": "ac8a366d",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.003Z",
          },
          {
            "content": "Second item",
            "created_at": "1970-01-01T00:00:00.004Z",
            "id": "1ea1417c",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.004Z",
          },
        ],
        "message": "Created 2 new todo items",
        "updated_todos": [
          {
            "content": "First item",
            "created_at": "1970-01-01T00:00:00.003Z",
            "id": "ac8a366d",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.003Z",
          },
          {
            "content": "Second item",
            "created_at": "1970-01-01T00:00:00.004Z",
            "id": "1ea1417c",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.004Z",
          },
        ],
        "is_new_creation": true,
      },
    ])
    let result = @todo_write.new(todo_list).call({
      "action": "update",
      "task_id": "ac8a366d",
      "status": "in-progress",
      "priority": "high",
      "content": "Updated first item",
    })
    @json.inspect(result, content=[
      "Ok",
      {
        "todos": [
          {
            "content": "Updated first item",
            "created_at": "1970-01-01T00:00:00.003Z",
            "id": "ac8a366d",
            "priority": "High",
            "status": "InProgress",
            "updated_at": "1970-01-01T00:00:00.006Z",
          },
          {
            "content": "Second item",
            "created_at": "1970-01-01T00:00:00.004Z",
            "id": "1ea1417c",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.004Z",
          },
        ],
        "message": "Updated task: Updated first item",
        "updated_todos": [
          {
            "content": "Updated first item",
            "created_at": "1970-01-01T00:00:00.003Z",
            "id": "ac8a366d",
            "priority": "High",
            "status": "InProgress",
            "updated_at": "1970-01-01T00:00:00.006Z",
          },
        ],
        "is_new_creation": false,
      },
    ])
    guard result is Ok(output) else {
      fail("Expected Ok result but got: \{result}")
    }
    inspect(
      output,
      content=(
        #|‚úÖ Operation completed: Updated task: Updated first item
        #|
        #|üìù Current todo list:
        #|  üî¥ üîÑ [ac8a366d] Updated first item
        #|  üü° ‚è≥ [1ea1417c] Second item
        #|
        #|‚ú® Updated items:
        #|  üî¥ üîÑ [ac8a366d] Updated first item
        #|
        #|üìä Current summary: Total 2 items | Pending 1 | In Progress 1 | Completed 0
      ),
    )
  })
}

///|
async test "todo_write/mark_completed" (t : @test.T) {
  @mock.run(t, taco => {
    let todo_list = @todo.list(
      clock=taco.clock,
      uuid=taco.uuid,
      cwd=taco.cwd.path(),
    )
    let result = @todo_write.new(todo_list).call({
      "action": "create",
      "content": (
        #|First item
        #|Second item
      ),
      "priority": "medium",
    })
    guard result is Ok(output) else {
      fail("Expected Ok result but got: \{result}")
    }
    @json.inspect(output, content={
      "todos": [
        {
          "content": "First item",
          "created_at": "1970-01-01T00:00:00.003Z",
          "id": "ac8a366d",
          "priority": "Medium",
          "status": "Pending",
          "updated_at": "1970-01-01T00:00:00.003Z",
        },
        {
          "content": "Second item",
          "created_at": "1970-01-01T00:00:00.004Z",
          "id": "1ea1417c",
          "priority": "Medium",
          "status": "Pending",
          "updated_at": "1970-01-01T00:00:00.004Z",
        },
      ],
      "message": "Created 2 new todo items",
      "updated_todos": [
        {
          "content": "First item",
          "created_at": "1970-01-01T00:00:00.003Z",
          "id": "ac8a366d",
          "priority": "Medium",
          "status": "Pending",
          "updated_at": "1970-01-01T00:00:00.003Z",
        },
        {
          "content": "Second item",
          "created_at": "1970-01-01T00:00:00.004Z",
          "id": "1ea1417c",
          "priority": "Medium",
          "status": "Pending",
          "updated_at": "1970-01-01T00:00:00.004Z",
        },
      ],
      "is_new_creation": true,
    })
    guard result is Ok(output) else {
      fail("Expected Ok result but got: \{result}")
    }
    inspect(
      output,
      content=(
        #|‚úÖ Operation completed: Created 2 new todo items
        #|
        #|üìù Newly created todos:
        #|  üü° ‚è≥ [ac8a366d] First item
        #|  üü° ‚è≥ [1ea1417c] Second item
        #|
        #|üìä Current summary: Total 2 items | Pending 2 | In Progress 0 | Completed 0
      ),
    )
    let result = @todo_write.new(todo_list).call({
      "action": "mark_completed",
      "task_id": "nonexistent",
    })
    @json.inspect(result, content=[
      "Error",
      ["ToolFailure", "Error: Task with ID 'nonexistent' not found."],
      "Error: Task with ID 'nonexistent' not found.",
    ])
    let result = @todo_write.new(todo_list).call({
      "action": "mark_completed",
      "task_id": "ac8a366d",
    })
    guard result is Ok(output) else {
      fail("Expected Ok result")
    }
    @json.inspect(output, content={
      "todos": [
        {
          "content": "First item",
          "created_at": "1970-01-01T00:00:00.003Z",
          "id": "ac8a366d",
          "priority": "Medium",
          "status": "Completed",
          "updated_at": "1970-01-01T00:00:00.006Z",
        },
        {
          "content": "Second item",
          "created_at": "1970-01-01T00:00:00.004Z",
          "id": "1ea1417c",
          "priority": "Medium",
          "status": "Pending",
          "updated_at": "1970-01-01T00:00:00.004Z",
        },
      ],
      "message": "Marked task as completed: First item",
      "updated_todos": [
        {
          "content": "First item",
          "created_at": "1970-01-01T00:00:00.003Z",
          "id": "ac8a366d",
          "priority": "Medium",
          "status": "Completed",
          "updated_at": "1970-01-01T00:00:00.006Z",
        },
      ],
      "is_new_creation": false,
    })
    guard result is Ok(output) else {
      fail("Expected Ok result but got: \{result}")
    }
    inspect(
      output,
      content=(
        #|‚úÖ Operation completed: Marked task as completed: First item
        #|
        #|üìù Current todo list:
        #|  üü° ‚úÖ [ac8a366d] First item
        #|  üü° ‚è≥ [1ea1417c] Second item
        #|
        #|‚ú® Updated items:
        #|  üü° ‚úÖ [ac8a366d] First item
        #|
        #|üìä Current summary: Total 2 items | Pending 1 | In Progress 0 | Completed 1
      ),
    )
  })
}

///|
async test "todo_write/mark_progress" (t : @test.T) {
  @mock.run(t, taco => {
    let todo_list = @todo.list(
      clock=taco.clock,
      uuid=taco.uuid,
      cwd=taco.cwd.path(),
    )
    let result = @todo_write.new(todo_list).call({
      "action": "create",
      "content": (
        #|First item
        #|Second item
      ),
      "priority": "medium",
    })
    @json.inspect(result, content=[
      "Ok",
      {
        "todos": [
          {
            "content": "First item",
            "created_at": "1970-01-01T00:00:00.003Z",
            "id": "ac8a366d",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.003Z",
          },
          {
            "content": "Second item",
            "created_at": "1970-01-01T00:00:00.004Z",
            "id": "1ea1417c",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.004Z",
          },
        ],
        "message": "Created 2 new todo items",
        "updated_todos": [
          {
            "content": "First item",
            "created_at": "1970-01-01T00:00:00.003Z",
            "id": "ac8a366d",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.003Z",
          },
          {
            "content": "Second item",
            "created_at": "1970-01-01T00:00:00.004Z",
            "id": "1ea1417c",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.004Z",
          },
        ],
        "is_new_creation": true,
      },
    ])
    let result = @todo_write.new(todo_list).call({
      "action": "mark_progress",
      "task_id": "nonexistent",
    })
    @json.inspect(result, content=[
      "Error",
      ["ToolFailure", "Error: Task with ID 'nonexistent' not found."],
      "Error: Task with ID 'nonexistent' not found.",
    ])
    inspect(result, content="Error: Task with ID 'nonexistent' not found.")
    let result = @todo_write.new(todo_list).call({
      "action": "mark_progress",
      "task_id": "ac8a366d",
    })
    @json.inspect(result, content=[
      "Ok",
      {
        "todos": [
          {
            "content": "First item",
            "created_at": "1970-01-01T00:00:00.003Z",
            "id": "ac8a366d",
            "priority": "Medium",
            "status": "InProgress",
            "updated_at": "1970-01-01T00:00:00.006Z",
          },
          {
            "content": "Second item",
            "created_at": "1970-01-01T00:00:00.004Z",
            "id": "1ea1417c",
            "priority": "Medium",
            "status": "Pending",
            "updated_at": "1970-01-01T00:00:00.004Z",
          },
        ],
        "message": "Marked task as in progress: First item",
        "updated_todos": [
          {
            "content": "First item",
            "created_at": "1970-01-01T00:00:00.003Z",
            "id": "ac8a366d",
            "priority": "Medium",
            "status": "InProgress",
            "updated_at": "1970-01-01T00:00:00.006Z",
          },
        ],
        "is_new_creation": false,
      },
    ])
    guard result is Ok(output) else {
      fail("Expected Ok result but got: \{result}")
    }
    inspect(
      output,
      content=(
        #|‚úÖ Operation completed: Marked task as in progress: First item
        #|
        #|üìù Current todo list:
        #|  üü° üîÑ [ac8a366d] First item
        #|  üü° ‚è≥ [1ea1417c] Second item
        #|
        #|‚ú® Updated items:
        #|  üü° üîÑ [ac8a366d] First item
        #|
        #|üìä Current summary: Total 2 items | Pending 1 | In Progress 1 | Completed 0
      ),
    )
  })
}
