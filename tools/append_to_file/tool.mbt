///|
priv struct Params {
  content : String
  path : String?
  separator : String?
} derive(ToJson, @json.FromJson)

///|
fn params(content~ : String, path? : String, separator? : String) -> Params {
  Params::{ content, path, separator }
}

///|
test {
  @json.inspect(
    params(content="Hello, World!", path="example.txt", separator="\n"),
    content={
      "content": "Hello, World!",
      "path": "example.txt",
      "separator": "\n",
    },
  )
}

///|
struct Result {
  path : String
} derive(@json.FromJson, ToJson)

///|
pub impl Show for Result with output(self : Result, logger : &Logger) -> Unit {
  logger.write_string("Appended content to file at path: \{self.path}")
}

///|
pub fn new(cwd : String) -> @tool.Tool[Result] {
  @tool.tool(
    description="Append content to a file at the specified path. If the file doesn't exist, it will be created. This tool will automatically create any directories needed to write the file.",
    name="append_to_file",
    parameters={
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "The content to append to the file.",
        },
        "path": {
          "type": "string",
          "description": "The path of the file to append to, relative to the current working directory.",
        },
        "separator": {
          "type": "string",
          "description": "Optional separator to add between existing content and new content (default: newline).",
          "default": "\n",
        },
      },
      "required": ["path", "content"],
    },
    @tool.ToolFn(async fn(args) -> @tool.Result[Result] noraise {
      let args : Params = @json.from_json(args) catch {
        error => return @tool.error("Invalid arguments: \{error}")
      }
      let path = if args.path is Some(path) {
        if @path.is_absolute(path) {
          path
        } else {
          @path.join(cwd, path)
        }
      } else {
        return @tool.error("Missing 'path' argument")
      }
      let separator = if args.separator is Some(separator) {
        separator
      } else {
        "\n"
      }
      let content_to_append = if (@fs.exists(path) catch {
          error =>
            return @tool.error("Failed to check if file exists: \{error}")
        }) {
        let existing_content = @fs.read_file(path) catch {
          error => return @tool.error("Failed to read existing file: \{error}")
        }
        if existing_content.is_empty() {
          args.content
        } else {
          existing_content + separator + args.content
        }
      } else {
        args.content
      }
      let _ = @fs.write_to_file(path, content_to_append) catch {
        error => return @tool.error("Failed to write to file: \{error}")
      }
      let result = Result::{ path, }
      @tool.ok(result)
    }),
  )
}
