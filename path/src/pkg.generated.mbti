// Generated using `moon info`, DON'T EDIT IT
package "illusory0x0/path"

// Values

// Errors
pub(all) suberror PathError {
  PathError(start~ : Int, message~ : String)
}
fn PathError::output(Self, &Logger) -> Unit // from trait `Show`
fn PathError::to_string(Self) -> String // from trait `Show`
impl Show for PathError

// Types and methods
type Directory[Component]
fn[Component : Eq] Directory::equal(Self[Component], Self[Component]) -> Bool // from trait `Eq`
fn[Component : Hash] Directory::hash(Self[Component]) -> Int // from trait `Hash`
fn[Component : Hash] Directory::hash_combine(Self[Component], Hasher) -> Unit // from trait `Hash`
fn[T] Directory::iter(Self[T]) -> Iter[T]
fn[T] Directory::length(Self[T]) -> Int
fn[A : PlatformPath] Directory::new(ArrayView[StringView]) -> Self[A] raise PathError
#deprecated
fn[Component : Eq] Directory::op_equal(Self[Component], Self[Component]) -> Bool // from trait `Eq`
fn[T] Directory::op_get(Self[T], Int) -> T
fn[A : IsString] Directory::output(Self[A], &Logger) -> Unit // from trait `Show`
#alias("_[_:_]")
fn[T] Directory::sub(Self[T], start? : Int, end? : Int) -> ArrayView[T]
fn[Component : ToJson] Directory::to_json(Self[Component]) -> Json // from trait `ToJson`
fn[A : IsString] Directory::to_string(Self[A]) -> String // from trait `Show`
impl[Component : Eq] Eq for Directory[Component]
impl[Component : Hash] Hash for Directory[Component]
impl[A : IsString] Show for Directory[A]
impl[Component : ToJson] ToJson for Directory[Component]

pub struct File[Component] {
  base : Component
  extension : Component?
}
fn[Component : Eq] File::equal(Self[Component], Self[Component]) -> Bool // from trait `Eq`
fn[A : IsString] File::extension(Self[A]) -> String?
fn[Component : Hash] File::hash(Self[Component]) -> Int // from trait `Hash`
fn[Component : Hash] File::hash_combine(Self[Component], Hasher) -> Unit // from trait `Hash`
fn[A : PlatformPath] File::new(base~ : StringView, extension? : StringView) -> Self[A] raise PathError
#deprecated
fn[Component : Eq] File::op_equal(Self[Component], Self[Component]) -> Bool // from trait `Eq`
fn[A : IsString] File::output(Self[A], &Logger) -> Unit // from trait `Show`
fn[Component : ToJson] File::to_json(Self[Component]) -> Json // from trait `ToJson`
fn[A : IsString] File::to_string(Self[A]) -> String // from trait `Show`
impl[Component : Eq] Eq for File[Component]
impl[Component : Hash] Hash for File[Component]
impl[A : IsString] Show for File[A]
impl[Component : ToJson] ToJson for File[Component]

pub(all) enum Path {
  WPath(WinPath)
  UPath(UnixPath)
}
fn Path::directory(Self) -> Directory[String]
fn Path::equal(Self, Self) -> Bool // from trait `Eq`
fn Path::file(Self) -> File[String]?
fn Path::hash(Self) -> Int // from trait `Hash`
fn Path::hash_combine(Self, Hasher) -> Unit // from trait `Hash`
fn Path::is_absolute(Self) -> Bool
fn Path::is_relative(Self) -> Bool
fn Path::is_root_path(Self) -> Bool
#deprecated
fn Path::op_equal(Self, Self) -> Bool // from trait `Eq`
fn Path::output(Self, &Logger) -> Unit // from trait `Show`
fn Path::parse(StringView) -> Self raise PathError
fn Path::prefix(Self) -> String
fn Path::to_json(Self) -> Json // from trait `ToJson`
fn Path::to_string(Self) -> String // from trait `Show`
impl Eq for Path
impl Hash for Path
impl Show for Path
impl ToJson for Path

type PathBuilder
fn PathBuilder::add_directory(Self, StringView) -> Unit raise PathError
fn PathBuilder::copy(Self) -> Self
fn PathBuilder::from_path(Path) -> Self
fn PathBuilder::output(Self, &Logger) -> Unit // from trait `Show`
fn PathBuilder::set_basename(Self, StringView) -> Unit raise PathError
fn PathBuilder::set_extension(Self, StringView) -> Unit raise PathError
fn PathBuilder::set_file(Self, base~ : StringView, extension~ : StringView) -> Unit raise PathError
fn PathBuilder::to_path(Self) -> Path
fn PathBuilder::to_string(Self) -> String // from trait `Show`
impl Show for PathBuilder

pub struct UnixPath {
  prefix : UnixPrefix
  directory : Directory[UnixPathComponent]
  file : File[UnixPathComponent]?
}
fn UnixPath::equal(Self, Self) -> Bool // from trait `Eq`
fn UnixPath::hash(Self) -> Int // from trait `Hash`
fn UnixPath::hash_combine(Self, Hasher) -> Unit // from trait `Hash`
fn UnixPath::is_absolute(Self) -> Bool
fn UnixPath::is_relative(Self) -> Bool
fn UnixPath::is_root_path(Self) -> Bool
fn UnixPath::new(prefix? : UnixPrefix, directory~ : Directory[UnixPathComponent], file? : File[UnixPathComponent]) -> Self
#deprecated
fn UnixPath::op_equal(Self, Self) -> Bool // from trait `Eq`
fn UnixPath::output(Self, &Logger) -> Unit // from trait `Show`
fn UnixPath::to_json(Self) -> Json // from trait `ToJson`
fn UnixPath::to_string(Self) -> String // from trait `Show`
impl Eq for UnixPath
impl Hash for UnixPath
impl Show for UnixPath
impl ToJson for UnixPath

type UnixPathComponent
fn UnixPathComponent::equal(Self, Self) -> Bool // from trait `Eq`
fn UnixPathComponent::hash(Self) -> Int // from trait `Hash`
fn UnixPathComponent::hash_combine(Self, Hasher) -> Unit // from trait `Hash`
#deprecated
fn UnixPathComponent::op_equal(Self, Self) -> Bool // from trait `Eq`
fn UnixPathComponent::output(Self, &Logger) -> Unit // from trait `Show`
fn UnixPathComponent::to_json(Self) -> Json // from trait `ToJson`
fn UnixPathComponent::to_string(Self) -> String // from trait `Show`
impl IsString for UnixPathComponent
impl PlatformPath for UnixPathComponent
impl Eq for UnixPathComponent
impl Hash for UnixPathComponent
impl Show for UnixPathComponent
impl ToJson for UnixPathComponent

pub(all) enum UnixPrefix {
  Root
  SlashSlash
  None
}
fn UnixPrefix::equal(Self, Self) -> Bool // from trait `Eq`
fn UnixPrefix::hash(Self) -> Int // from trait `Hash`
fn UnixPrefix::hash_combine(Self, Hasher) -> Unit // from trait `Hash`
#deprecated
fn UnixPrefix::op_equal(Self, Self) -> Bool // from trait `Eq`
fn UnixPrefix::to_json(Self) -> Json // from trait `ToJson`
impl Eq for UnixPrefix
impl Hash for UnixPrefix
impl ToJson for UnixPrefix

pub struct WinPath {
  prefix : WinPrefix
  directory : Directory[WinPathComponent]
  file : File[WinPathComponent]?
}
fn WinPath::equal(Self, Self) -> Bool // from trait `Eq`
fn WinPath::hash(Self) -> Int // from trait `Hash`
fn WinPath::hash_combine(Self, Hasher) -> Unit // from trait `Hash`
fn WinPath::is_absolute(Self) -> Bool
fn WinPath::is_relative(Self) -> Bool
fn WinPath::is_root_path(Self) -> Bool
fn WinPath::new(prefix? : WinPrefix, directory~ : Directory[WinPathComponent], file? : File[WinPathComponent]) -> Self
#deprecated
fn WinPath::op_equal(Self, Self) -> Bool // from trait `Eq`
fn WinPath::output(Self, &Logger) -> Unit // from trait `Show`
fn WinPath::to_json(Self) -> Json // from trait `ToJson`
fn WinPath::to_string(Self) -> String // from trait `Show`
impl Eq for WinPath
impl Hash for WinPath
impl Show for WinPath
impl ToJson for WinPath

type WinPathComponent
fn WinPathComponent::equal(Self, Self) -> Bool // from trait `Eq`
fn WinPathComponent::hash(Self) -> Int // from trait `Hash`
fn WinPathComponent::hash_combine(Self, Hasher) -> Unit // from trait `Hash`
#deprecated
fn WinPathComponent::op_equal(Self, Self) -> Bool // from trait `Eq`
fn WinPathComponent::output(Self, &Logger) -> Unit // from trait `Show`
fn WinPathComponent::to_json(Self) -> Json // from trait `ToJson`
fn WinPathComponent::to_string(Self) -> String // from trait `Show`
impl IsString for WinPathComponent
impl PlatformPath for WinPathComponent
impl Eq for WinPathComponent
impl Hash for WinPathComponent
impl Show for WinPathComponent
impl ToJson for WinPathComponent

pub(all) enum WinPrefix {
  Root
  VerbatimSymlink(symlink~ : String)
  VerbatimUNC(hostname~ : String, shared_folder~ : String)
  VerbatimVolumeLetter(Char)
  VerbatimVolumeGUID(String)
  DeviceNS(device~ : String)
  UNC(hostname~ : String, shared_folder~ : String)
  VolumeLetter(Char)
  None
}
fn WinPrefix::equal(Self, Self) -> Bool // from trait `Eq`
fn WinPrefix::hash(Self) -> Int // from trait `Hash`
fn WinPrefix::hash_combine(Self, Hasher) -> Unit // from trait `Hash`
#deprecated
fn WinPrefix::op_equal(Self, Self) -> Bool // from trait `Eq`
fn WinPrefix::output(Self, &Logger) -> Unit // from trait `Show`
fn WinPrefix::to_json(Self) -> Json // from trait `ToJson`
fn WinPrefix::to_string(Self) -> String // from trait `Show`
impl Eq for WinPrefix
impl Hash for WinPrefix
impl Show for WinPrefix
impl ToJson for WinPrefix

// Type aliases
pub typealias Directory[UnixPathComponent] as UnixDirectory

pub typealias File[UnixPathComponent] as UnixFile

pub typealias Directory[WinPathComponent] as WinDirectory

pub typealias File[WinPathComponent] as WinFile

// Traits
trait IsString
impl IsString for String
impl IsString for StringView

trait PlatformPath

