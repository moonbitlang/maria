// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/path"

// Values

// Errors
pub(all) suberror PathError {
  PathError(start~ : Int, message~ : String)
}
impl Show for PathError

// Types and methods
type Directory[Component]
fn[T] Directory::iter(Self[T]) -> Iter[T]
fn[T] Directory::length(Self[T]) -> Int
fn[A : PlatformPath] Directory::new(ArrayView[StringView]) -> Self[A] raise PathError
fn[T] Directory::op_get(Self[T], Int) -> T
#alias("_[_:_]")
fn[T] Directory::sub(Self[T], start? : Int, end? : Int) -> ArrayView[T]
impl[Component : Eq] Eq for Directory[Component]
impl[Component : Hash] Hash for Directory[Component]
impl[A : IsString] Show for Directory[A]
impl[Component : ToJson] ToJson for Directory[Component]

pub struct File[Component] {
  base : Component
  extension : Component?
}
fn[A : IsString] File::extension(Self[A]) -> String?
fn[A : PlatformPath] File::new(base~ : StringView, extension? : StringView) -> Self[A] raise PathError
impl[Component : Eq] Eq for File[Component]
impl[Component : Hash] Hash for File[Component]
impl[A : IsString] Show for File[A]
impl[Component : ToJson] ToJson for File[Component]

pub(all) enum Path {
  WPath(WinPath)
  UPath(UnixPath)
}
fn Path::directory(Self) -> Directory[String]
fn Path::file(Self) -> File[String]?
fn Path::is_absolute(Self) -> Bool
fn Path::is_relative(Self) -> Bool
fn Path::is_root_path(Self) -> Bool
fn Path::output(Self, &Logger, kind? : PathKind) -> Unit
fn Path::parse(StringView, kind? : PathKind) -> Self raise PathError
fn Path::prefix(Self) -> String
fn Path::to_string(Self, kind? : PathKind) -> String
impl Eq for Path
impl Hash for Path
impl Show for Path
impl ToJson for Path

type PathBuilder
fn PathBuilder::add_directory(Self, StringView) -> Unit raise PathError
fn PathBuilder::copy(Self) -> Self
fn PathBuilder::from_path(Path) -> Self
fn PathBuilder::output(Self, &Logger, kind? : PathKind) -> Unit
fn PathBuilder::set_basename(Self, StringView) -> Unit raise PathError
fn PathBuilder::set_extension(Self, StringView) -> Unit raise PathError
fn PathBuilder::set_file(Self, base~ : StringView, extension~ : StringView) -> Unit raise PathError
fn PathBuilder::to_path(Self) -> Path
fn PathBuilder::to_string(Self, kind? : PathKind) -> String
impl Show for PathBuilder

pub(all) enum PathKind {
  File
  Directory
}

pub(all) enum PathStyle {
  Win
  Unix
  Unknown
}
impl Show for PathStyle

pub struct UnixPath {
  prefix : UnixPrefix
  directory : Directory[UnixPathComponent]
  file : File[UnixPathComponent]?
}
fn UnixPath::is_absolute(Self) -> Bool
fn UnixPath::is_relative(Self) -> Bool
fn UnixPath::is_root_path(Self) -> Bool
fn UnixPath::new(prefix? : UnixPrefix, directory~ : Directory[UnixPathComponent], file? : File[UnixPathComponent]) -> Self
fn UnixPath::output(Self, &Logger, kind? : PathKind) -> Unit
fn UnixPath::to_string(Self, kind? : PathKind) -> String
impl Eq for UnixPath
impl Hash for UnixPath
impl Show for UnixPath
impl ToJson for UnixPath

type UnixPathComponent
impl Eq for UnixPathComponent
impl Hash for UnixPathComponent
impl Show for UnixPathComponent
impl ToJson for UnixPathComponent
impl IsString for UnixPathComponent
impl PlatformPath for UnixPathComponent

pub(all) enum UnixPrefix {
  Root
  SlashSlash
  None
}
impl Eq for UnixPrefix
impl Hash for UnixPrefix
impl ToJson for UnixPrefix

pub struct WinPath {
  prefix : WinPrefix
  directory : Directory[WinPathComponent]
  file : File[WinPathComponent]?
}
fn WinPath::is_absolute(Self) -> Bool
fn WinPath::is_relative(Self) -> Bool
fn WinPath::is_root_path(Self) -> Bool
fn WinPath::new(prefix? : WinPrefix, directory~ : Directory[WinPathComponent], file? : File[WinPathComponent]) -> Self
fn WinPath::output(Self, &Logger, kind? : PathKind) -> Unit
fn WinPath::to_string(Self, kind? : PathKind) -> String
impl Eq for WinPath
impl Hash for WinPath
impl Show for WinPath
impl ToJson for WinPath

type WinPathComponent
impl Eq for WinPathComponent
impl Hash for WinPathComponent
impl Show for WinPathComponent
impl ToJson for WinPathComponent
impl IsString for WinPathComponent
impl PlatformPath for WinPathComponent

pub(all) enum WinPrefix {
  Root
  VerbatimSymlink(symlink~ : String)
  VerbatimUNC(hostname~ : String, shared_folder~ : String)
  VerbatimVolumeLetter(Char)
  VerbatimVolumeGUID(String)
  DeviceNS(device~ : String)
  UNC(hostname~ : String, shared_folder~ : String)
  VolumeLetter(Char)
  None
}
impl Eq for WinPrefix
impl Hash for WinPrefix
impl Show for WinPrefix
impl ToJson for WinPrefix

// Type aliases
pub type UnixDirectory = Directory[UnixPathComponent]

pub type UnixFile = File[UnixPathComponent]

pub type WinDirectory = Directory[WinPathComponent]

pub type WinFile = File[WinPathComponent]

// Traits
trait IsString
impl IsString for String
impl IsString for StringView

trait PlatformPath

