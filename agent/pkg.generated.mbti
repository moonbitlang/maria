// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/maria/agent"

import(
  "moonbitlang/core/random"
  "moonbitlang/maria/internal/pino"
  "moonbitlang/maria/internal/uuid"
  "moonbitlang/maria/model"
  "moonbitlang/maria/openai"
  "moonbitlang/maria/tool"
)

// Values
async fn new(@model.Model, rand? : @random.Rand, uuid? : @uuid.Generator, logger? : @pino.Logger, cwd~ : StringView) -> Agent

// Errors

// Types and methods
pub struct Agent {
  rand : @random.Rand
  uuid : @uuid.Generator
  cwd : String
  model : @model.Model
  // private fields
}
fn Agent::add_listener(Self, async (Event) -> Unit) -> Unit
fn Agent::add_message(Self, @openai.ChatCompletionMessageParam) -> Unit
fn Agent::add_tool(Self, @tool.Tool) -> Unit
fn Agent::close(Self) -> Unit
async fn Agent::start(Self) -> Unit

pub enum Event {
  PreConversation
  PostConversation
  MessageAdded(@openai.ChatCompletionMessageParam)
  PreToolCall(@openai.ChatCompletionMessageToolCall)
  PostToolCall(@openai.ChatCompletionMessageToolCall, result~ : @tool.Result, rendered~ : String)
  TokenCounted(Int)
  ContextPruned(origin_token_count~ : Int, pruned_token_count~ : Int)
  RequestCompleted(usage~ : @openai.CompletionUsage?, message~ : @openai.ChatCompletionMessage)
}

// Type aliases

// Traits

